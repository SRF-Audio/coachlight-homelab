- name: Complete VM setup and Docker installation
  hosts: debian_docker_host
  become: yes
  vars:
    user: "{{ hostvars['debian_docker_host']['ansible_user'] }}"

  tasks:
    - name: Wait for SSH to come up
      wait_for:
        port: 22
        host: '{{ ansible_host }}'
        timeout: 300
        delay: 10

    - name: Ensure SSH directory exists
      file:
        path: "/home/{{ user }}/.ssh"
        state: directory
        mode: 0700
        owner: "{{ user }}"
        group: "{{ user }}"

    - name: Write SSH public key to file
      copy:
        dest: "/home/{{ user }}/.ssh/debian-docker-host.pub"
        content: "{{ lookup('env', 'VM_SSH_PUBLIC_KEY') }}"
        mode: 0600
        owner: "{{ user }}"
        group: "{{ user }}"

    - name: Remove conflicting Docker packages
      apt:
        name: "{{ item }}"
        state: absent
      loop:
        - docker.io
        - docker-doc
        - docker-compose
        - podman-docker
        - containerd
        - runc
      ignore_errors: yes

    - name: Update all packages
      apt:
        update_cache: yes
        upgrade: 'dist'

    - name: Install useful packages
      apt:
        name: ['ca-certificates', 'curl', 'jq', 'nmap', 'vim', 'wget', 'zip', 'unzip', 'git', 'htop', 'net-tools', 'ufw']
        state: present
        update_cache: yes

    - name: Create Docker apt keyring directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker's official GPG key
      get_url:
        url: https://download.docker.com/linux/debian/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: 'a+r'

    - name: Add Docker repository and update apt cache
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
      args:
        executable: /bin/bash

    - name: Install Docker packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-buildx-plugin
        - docker-compose-plugin

    - name: Test Docker installation
      command: docker run hello-world

    - name: Ensure user exists and is in the Docker group
      user:
        name: "{{ user }}"
        shell: "/bin/bash"
        state: present
        groups: docker
        append: yes

    - name: Ensure Docker service is running and enabled
      service:
        name: docker
        state: started
        enabled: yes

    - name: Ensure SSH directory exists
      file:
        path: "/home/{{ user }}/.ssh"
        state: directory
        mode: 0700
        owner: "{{ user }}"
        group: "{{ user }}"

    - name: Write GitHub SSH private key to file
      copy:
        dest: "/home/{{ user }}/.ssh/github-key"
        content: "{{ lookup('env', 'GITHUB_SSH_PRIVATE_KEY') }}"
        mode: 0600
        owner: "{{ user }}"
        group: "{{ user }}"

    - name: Test Docker without sudo
      shell: |
        sg docker -c "docker ps"
      become: no
      register: docker_test
      failed_when: "'permission denied' in docker_test.stderr"
      changed_when: false

    - name: Clone GitHub repository
      git:
        repo: "https://github.com/SRF-Audio/coachlight-homelab.git"
        dest: "/home/{{ user }}/coachlight-homelab"
        version: main
      become: no

    - name: Run Docker Compose
      command: docker compose up -d
      args:
        chdir: "/home/{{ user }}/coachlight-homelab"
      become: no

    # Adding Firewall Rules to Open Required Ports for Omada Controller
    - name: Ensure UFW is installed
      apt:
        name: ufw
        state: present
        update_cache: yes

    - name: Allow SSH through UFW
      ufw:
        rule: allow
        port: 22
        proto: tcp

    - name: Allow Omada HTTP port (8088)
      ufw:
        rule: allow
        port: 8088
        proto: tcp

    - name: Allow Omada HTTPS port (8043)
      ufw:
        rule: allow
        port: 8043
        proto: tcp

    - name: Allow MongoDB port (27017)
      ufw:
        rule: allow
        port: 27017
        proto: tcp

    - name: Allow Omada Device Discovery port (29810)
      ufw:
        rule: allow
        port: 29810
        proto: udp

    - name: Allow Omada Manager/Adoption ports (29811-29816)
      ufw:
        rule: allow
        port: "29811:29816"
        proto: tcp

    - name: Enable UFW firewall
      ufw:
        state: enabled

    # VNC Server Installation and Configuration
    - name: Install TigerVNC server
      apt:
        name: tigervnc-standalone-server
        state: present
        update_cache: yes

    - name: Create VNC systemd service file
      copy:
        dest: "/etc/systemd/system/vncserver@.service"
        content: |
          [Unit]
          Description=VNC Server for %i
          After=network.target

          [Service]
          Type=forking
          User={{ user }}
          PAMName=login
          PIDFile=/home/{{ user }}/.vnc/%H%i.pid
          ExecStart=/usr/bin/vncserver :1 -geometry 1920x1080 -depth 24
          ExecStop=/usr/bin/vncserver -kill :1

          [Install]
          WantedBy=multi-user.target
      mode: "0644"

    - name: Reload systemd to apply VNC service
      command: systemctl daemon-reload

    - name: Enable VNC server to start at boot
      systemd:
        name: vncserver@1
        enabled: yes
        state: started

    - name: Allow VNC port (5901) through UFW
      ufw:
        rule: allow
        port: 5901
        proto: tcp
